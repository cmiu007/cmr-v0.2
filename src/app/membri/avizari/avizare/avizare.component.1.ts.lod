import { Component, OnInit, Input } from '@angular/core';
import { FormGroup, FormArray, FormControl, FormBuilder } from '@angular/forms';
import { Router, RouterStateSnapshot, ActivatedRoute } from '@angular/router';
import { Subject } from 'rxjs/Subject';

import { FormSetService } from '../../../services/form-set.service';
import { IsAddActiveService } from '../../../services/is-add-active.service';

import { ApiDataService } from '../../../services/api-data.service';
import { ApiData } from '../../../shared/interfaces/message.interface';

import { Avizare } from '../../../shared/interfaces/avizari.interface';
import { Asigurator } from '../../../shared/models/registre.model';
import { DataCalService } from '../../../services/data-cal.service';
import { Asigurare } from '../../../shared/interfaces/asigurari.interface';
import { AvizariListComponent } from '../avizari-list/avizari-list.component';
import { AvizariComponent } from '../avizari.component';
import { environment } from '../../../../environments/environment';
import { AlertSnackbarService } from '../../../services/alert-snackbar.service';
import { Cpp } from '../../../shared/interfaces/cpps.interface';

@Component({
  selector: 'app-avizare',
  templateUrl: './avizare.component.html',
  styleUrls: ['./avizare.component.css']
})
export class AvizareComponent implements OnInit {
  public static addActiveSubj: Subject<boolean> = new Subject;
  public static _formDataChanged: Subject<boolean> = new Subject;

  @Input('formAvizari')
  public formAvizari: FormGroup;

  @Input('arrayIndex')
  public arrayIndex;

  // formStatus = 0;
  // 0 - new
  // 1 - draft
  // 2 - activ
  // 3 - inactiv
  isAdmin = false;
  isHidden = false;
  isListaAsigurariHidden = true;
  itemName = '';
  itemStatus = '';
  submitStatus = false;
  avizareForm: FormGroup;
  avizareFormData: Avizare;
  formTitleStyle;
  loading = false;
  memId = sessionStorage.getItem('currentMemId');

  cppData: Cpp[];

  asigurariLoading = false;
  asigurariFormData: Asigurare[];
  asigurareFormArray: FormArray;
  genPDFAddress = '';
  avizareStart: string;
  avizareEnd: string;

  filteredAsigurator;

  constructor(
    private _formSet: FormSetService,
    private _router: Router,
    private _dataCal: DataCalService,
    private _apiData: ApiDataService,
    private _fb: FormBuilder,
    private _setAddBtn: IsAddActiveService,
    private _snackBar: AlertSnackbarService,
    private _aRoute: ActivatedRoute
  ) {
    this.genPDFAddress = environment.resUrl;
  }

  ngOnInit() {
    this.setFormData();
    this.setFormStatus();
    this.setFormRO();
    this.setItemName();
    this.initArrayInFormGroup();
    AvizareComponent.addActiveSubj
      .subscribe(result => {
        const b = this.formAvizari.get('avizari') as FormArray;
        // this.avizareForm = this._formSet.avizare(b.at(this.arrayIndex).value);
        // this.setFormStatus();
        this.setFormRO();
        this.setItemName();
        this.initArrayInFormGroup();
      });
    AvizareComponent._formDataChanged
      .subscribe(result => {
        this.avizareForm.removeControl('asigurare');
        this.asigurariFormData = null;
        this.initArrayInFormGroup();
        this.getAsigurariData();
      });
  }

  setFormData(): void {
    const a = this.formAvizari.get('avizari') as FormArray;
    this.avizareForm = this._formSet.avizare(a.at(this.arrayIndex).value);
    console.log(this.avizareForm);
    this.avizareFormData = this.avizareForm.value;
  }

  setFormStatus(): void {
    if (this.avizareFormData.status !== null) {
      this.avizareStart = this.avizareFormData.dlp_data_start;
      this.avizareEnd = this.avizareFormData.dlp_data_end;
    }
    switch (this.avizareFormData.status) {
      case null:
        this.itemName = 'Avizare Nouă';
        this.avizareForm.get('id_mem').setValue(this.memId);
        break;

      case 0:
        this.itemStatus = 'Avizare in curs de completare';
        this._setAddBtn.setStatus(false);
        this.getAsigurariData(); // show asigurari
        break;

      case 1:
        this.itemStatus = 'Avizare Completă';
        this.getAsigurariData();
        break;

      case 2:
        this.itemStatus = 'Activă';
        break;

      case 3:
        this.itemStatus = 'Inactivă';
        break;

      default:
        break;
    }
  }

  setFormRO(): void {
    this.avizareForm.get('id_mem').setValue(this.memId);
    if (this.avizareFormData.status === 1 || this.avizareFormData.status === 2 || this.avizareFormData.status === 3) {
      Object.keys(this.avizareForm.controls).forEach(
        key => {
          this.avizareForm.get(key).disable();
        });
    }
  }

  setItemName(): void {
    this.itemName =
      this.avizareForm.get('dlp_data_start').value + ' pana la ' +
      this.avizareForm.get('dlp_data_end').value;
    if (this.avizareForm.get('dlp_data_start').value === '') {
      this.itemName = 'Avizare nouă';
    }
  }

  addDlpDateEnd(): void {
    if (this.avizareForm.get('dlp_data_start').value !== '') {
      this.avizareForm.get('dlp_data_end').setValue(this._dataCal.addOneYear(this.avizareForm.get('dlp_data_start').value));
    }
  }

  onClickAvizare(actiune: string): void {
    if (this.avizareForm.valid === false) {
      this._snackBar.showSnackBar('Formular Invalid');
      return;
    }
    // check if submit is in progress
    if (this.loading === true) {
      return;
    }

    this.loading = true;
    const data = this.avizareForm.value;
    const idItem = data.id_dlp;

    delete data.id_dlp;
    delete data.inchis;
    delete data.asigurare;

    switch (actiune) {
      case 'adauga':
        data.status = 0;
        this._apiData.apiAdauga('dlp', data)
          .subscribe((response: ApiData) => {
            if (response.status === 0) {
              return;
            }
            this.loading = false;
            AvizariComponent._formDataChanged.next();
          });
        return;

      case 'modifica':

        break;

      case 'finalizeaza':
        data.status = 1;
        break;

      case 'printeaza':
        this.printAvizare();
        break;

      default:
        break;
    }

    delete data.id_certificat;

      this._apiData.apiModifica('dlp', idItem, data)
        .subscribe((response: ApiData) => {
          if (response.status === 0) {
            return;
          }
          this.loading = false;
          AvizariComponent._formDataChanged.next();
        });
      return;

  }

  onClickAsigurare(): void {
    this.isListaAsigurariHidden = !this.isListaAsigurariHidden;
  }

  printAvizare() {
    const nativeWindow = window;
    const certificatId = this.avizareForm.get('id_certificat').value;
    let url = this.genPDFAddress + 'genpdf.php?token=' + sessionStorage.getItem('userToken');
    url = url + '&actiune=spate&id=' + certificatId;
    nativeWindow.open(url);
  }

  getAsigurariData(): void {
    this.asigurariLoading = true;
    const memId = sessionStorage.getItem('currentMemId');
    this._apiData.apiLista('asigurare', memId)
      .subscribe((response: ApiData) => {
        if (response.status === 0) {
          return;
        }
        this.asigurariFormData = response.data as Asigurare[];
        this.asigurariFormData = this.asigurariFormData.filter(asigurare => asigurare.id_dlp === this.avizareFormData.id_dlp);
        if (this.asigurariFormData.length === 0) {
          // avem un nou dlp
          this.getMemCpp();
        } else {
          this.asigurariFormData = this.asigurariFormData.filter(
            asigurare => asigurare.id_dlp === +this.avizareForm.get('id_dlp').value);
          this.setAsigurariArray();
        }
        this.loading = false;
        // console.log(this.avizareForm);
      });
    return;
  }

  private getMemCpp(): void {
    this._apiData.apiLista('cpp', this._aRoute.snapshot.params['id'])
      .subscribe((response: ApiData) => {
        if (response.status === 0) {
          return;
        }
        this.cppData = response.data;
        this.sortCpp();
        this.setNewAsigurariForm();
        // console.log(this.avizareForm);
      });
  }

  private sortCpp(): void {
    // 1. Ordonare dupa data
    Object(this.cppData).sort((a, b) => {
      return a.date_start > b.date_start ? -1 : 1;
    });
    // 2. ordonare dupa tip_cpp
    Object(this.cppData).sort((a, b) => {
      return a.reg_cpp_tip_id < b.reg_cpp_tip_id ? -1 : 1;
    });
  }

  private setNewAsigurariForm(): void {
    Object(this.cppData).forEach((element: Cpp) => {
      if (element.grad_prof_cpp_id === 2 || element.date_end === '0000-00-00') {
        const asigurariData: Asigurare = {
          id_mem: +this.avizareForm.get('id_mem').value,
          id_dlp: +this.avizareForm.get('id_dlp').value,
          id_cpp: +element.id_cpp,
          // status: +this.avizareForm.get('status').value
          status: 0
        };
        const newAsigurareForm = this._formSet.asigurare(asigurariData);
        const arrayControl = this.avizareForm.get('asigurare') as FormArray;
        arrayControl.insert(0, newAsigurareForm);
      }
    });
  }

  initArrayInFormGroup(): void {
    this.asigurareFormArray = this._fb.array([]);
    this.avizareForm.addControl('asigurare', this.asigurareFormArray);
  }

  setAsigurariArray(): void {
    // console.log(this.avizareForm);
    this.asigurariFormData.forEach(
      (asigurareData: Asigurare) => {
        const asigurareForm = this._formSet.asigurare(asigurareData);
        const control = <FormArray>this.avizareForm.controls['asigurare'];
        control.insert(0, asigurareForm);
      }
    );
  }

  delAvizare(): void {
    const control = <FormArray>this.formAvizari.controls['avizari'];
    control.removeAt(0);
    // show add again
    this._setAddBtn.setStatus(true);
  }

  onClickDetali(): void {

  }
}
